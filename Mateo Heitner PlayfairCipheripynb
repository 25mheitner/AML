{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1T2YKi98bpHNHLFuRqXRpQe-FkM_VtmNd","timestamp":1694544341919}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["###List all your references, including people that helped you, in this text box below.\n","\n","\n","x:No One\n","\n","\n","###Copy and paste your commented code below.\n"],"metadata":{"id":"yOKBud4OQl77"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"2qgfpC2xQffP"},"outputs":[],"source":["#method that cleans the key\n","def cleanKey(key):\n","    cleanedString = \"\"\n","    for i in key:\n","        #replace j with i\n","        if i == 'j':\n","            i = 'i'\n","        if i not in cleanedString:\n","            cleanedString += i\n","\n","    return cleanedString.lower().replace(' ', '')\n","\n","#method that generates matrix\n","def genMatrix(key):\n","    #set up matrix\n","    rows, cols = (5, 5)\n","\n","    #lowercase alphabet\n","    alphabet = \"abcdefghiklmnopqrstuvwxyz\"\n","\n","    #creating matrix\n","    matrix = [[0 for _ in range(rows)] for _ in range(cols)]\n","\n","    # Fill the matrix with the characters from the key\n","    for i, char in enumerate(key):\n","        row = i // 5\n","        col = i % 5\n","        matrix[row][col] = char\n","\n","    #fill in rest of matrix\n","    index = 0\n","    for row in range(5):\n","        for col in range(5):\n","            if matrix[row][col] == 0:\n","                while alphabet[index] in key:\n","                    index += 1\n","                matrix[row][col] = alphabet[index]\n","                index += 1\n","\n","    return matrix\n","\n","#method that splits the message into diagrams\n","def genDiagrams(message):\n","    #making sure i's and j's replaced and no spaces\n","    cleaned = message.lower().replace('j', 'i').replace(' ', '')\n","    diagrams = []\n","\n","    i = 0\n","    #iterating through cleaned method, and adding pairs\n","    while i < (len(cleaned)):\n","        #if at end then add the extra letter\n","        if i == (len(cleaned) - 1):\n","            newLetter = 'x'\n","            if cleaned[i] == 'x':\n","                newLetter = 'i'\n","\n","            diagrams.append(cleaned[i] + newLetter)\n","            break\n","\n","        #if not equal then just add them\n","        if cleaned[i] != cleaned[i + 1]:\n","            diagrams.append(cleaned[i] + cleaned[i + 1])\n","            i += 1\n","        #else deal w x scenario or i scenario\n","        elif cleaned[i] == 'x':\n","            diagrams.append(cleaned[i] + 'i')\n","        else:\n","            diagrams.append(cleaned[i] + 'x')\n","        i += 1\n","\n","    return diagrams\n","\n","#method that actually encrypts the message\n","def encrypt(diagrams, matrix):\n","    encrypted = []\n","    for diagram in diagrams:\n","        newPair = \"\"\n","        #get rows and cols\n","        first = diagram[0]\n","        second = diagram[1]\n","\n","        firstRow = 0\n","        firstCol = 0\n","        secondRow = 0\n","        secondCol = 0\n","\n","        for i in range(len(matrix)):\n","            if first in matrix[i]:\n","                firstRow = i\n","                firstCol = matrix[i].index(first)\n","            if second in matrix[i]:\n","                secondRow = i\n","                secondCol = matrix[i].index(second)\n","\n","       #checking if rows are the same and dealing w that\n","        if firstRow == secondRow:\n","            if firstCol == 4:\n","                firstCol = 0\n","            else:\n","                firstCol += 1\n","            if secondCol == 4:\n","                secondCol = 0\n","            else:\n","                secondCol += 1\n","\n","            newPair += matrix[firstRow][firstCol]+ matrix[secondRow][secondCol]\n","        #checking if cols are the same and dealing w\n","        elif firstCol == secondCol:\n","            if firstRow== 4:\n","                firstRow = 0\n","            else:\n","                firstRow += 1\n","            if secondRow == 4:\n","                secondRow = 0\n","            else:\n","                secondRow+= 1\n","\n","            newPair += matrix[firstRow][firstCol]+ matrix[secondRow][secondCol]\n","        else:\n","            newPair += matrix[firstRow][secondCol]+ matrix[secondRow][firstCol]\n","\n","        #adding to encrypted\n","        encrypted.append(newPair)\n","\n","    return encrypted\n","\n","#method to print the encrypted method\n","def printEncrypted(encrypted):\n","\n","    print(''.join(encrypted))\n","\n","\n","def main():\n","    #getting key and message\n","    print('\\nKey: ')\n","    ogKey = input()\n","    print('Message: ')\n","    ogMessage = input()\n","\n","    #cleaning\n","    key = cleanKey(ogKey)\n","    print(\"Cleaned Key: \" + key)\n","    #calling each of the methods\n","    matrix = genMatrix(key)\n","    diagrams = genDiagrams(ogMessage)\n","    encrypted = encrypt(diagrams, matrix)\n","    print('\\nEncrypted Message: ')\n","    printEncrypted(encrypted)\n","\n","\n","main()"]},{"cell_type":"markdown","source":["###List the test data that failed.  One per line.\n","\n","\n","###Use ChatGPT to solve one subtask of this project.  \n","###Put your link to your ChatGPT conversation here.\n","\n","x:https://chat.openai.com/share/9044d569-5417-4c27-9896-89cf4505b72a\n","\n","###What did you learn or like about from ChatGPT's answer?\n","\n","<b>I tried having Chat Gpt write the clean key method as I realized that this was the most inefficient for me.  Chat Gpt was able to write the main part of the method pretty well, however, it struggled in removing repeated letters.  After many back and forths, it still struggled, and ultimately was not able to complete this task even with varying instructions.  \n","\n","As for the part of the method did work, I was interested to see that Chat did it very similar to the way that I did it by iterating through the original key, and adding all the non repeated letters to a different string, at the same time replacing all the j's for i. </b>\n","\n","###What I learned from another student\n","<b> The Stack Overflow article that explains this phenomenon is here: https://stackoverflow.com/a/53657523 </b>\n","\n","<b> Felix explained a way to remove all the repeated letters easier rather than looping through the entire key, and adding the values that are not repeated and not spaces to a new string that will be returned.  In this way, you take the input string, and split it to a list, removing the spaces and making it lowercase at the same time.  To do this, you write the following code:\n","\n","\n","keyList = [i.lower() for i in key.replace('j', 'i') if i != ' ']\n","\n","\n","At this point, you have a list that has each letter from the key, not including spaces as a different lowercase letter at each index of the array.  Then, you write the following line of code:\n","\n","\n","return ''.join(list(dict.fromKeys(keyList)))\n","\n","This then returns a string that removes all the spaces and repeated letters from the key.\n","\n","While this is not necessarily more efficient than this way of doing it:\n","\n","\n","\n","def cleanKey(key):\n","    cleanedString = \"\"\n","    for i in key:\n","        #replace j with i\n","        if i == 'j':\n","            i = 'i'\n","        if i not in cleanedString:\n","            cleanedString += i\n","    \n","    return cleanedString.lower().replace(' ', '')\n","\n","\n","It is still cool because it allows you to be able to write the entire code in one line, and is just a nice alternative (although it does allocate more memory because of the mapping to a dictionary). Additionally, it must be written in Python 3.7 or later as that was the version of Python that added ordered dictionaries.\n","</b>\n","\n","###Please put your response to this question in **bold**."],"metadata":{"id":"YHPEmxnwSbre"}}]}